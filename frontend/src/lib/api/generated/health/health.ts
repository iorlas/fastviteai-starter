/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Boilerplate API
 * A modern full-stack boilerplate with FastAPI backend and React frontend
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DatabaseHealthResponse,
  HealthResponse
} from '../api.schemas';

import { customInstance } from '../../client';




/**
 * Basic health check endpoint for liveness probes.

This endpoint verifies that the application is running and responsive.
It does not check external dependencies like database.

Args:
    service: HealthService injected via dependency

Returns:
    HealthResponse: Status indicating the application is running

Example response:
    {"status": "healthy"}
 * @summary Health Check
 */
export const healthCheckApiV1HealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<HealthResponse>(
      {url: `/api/v1/health`, method: 'GET', signal
    },
      );
    }
  



export const getHealthCheckApiV1HealthGetQueryKey = () => {
    return [
    `/api/v1/health`
    ] as const;
    }

    
export const getHealthCheckApiV1HealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV1HealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>> = ({ signal }) => healthCheckApiV1HealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV1HealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>>
export type HealthCheckApiV1HealthGetQueryError = unknown


export function useHealthCheckApiV1HealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV1HealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV1HealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV1HealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV1HealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV1HealthGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Database connectivity health check for readiness probes.

Attempts to execute a simple query to verify database connection.
Returns 200 if database is reachable, 503 if connection fails.

This endpoint is used by readiness probes to determine if the
application can serve traffic.

Args:
    response: FastAPI response object for setting status code
    service: HealthService injected via dependency

Returns:
    DatabaseHealthResponse: Status indicating database connectivity

Example response (healthy):
    {"status": "healthy", "database": "connected"}

Example response (unhealthy):
    {"status": "unhealthy", "database": "disconnected", "error": "connection refused"}
 * @summary Health Check Db
 */
export const healthCheckDbApiV1HealthDbGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<DatabaseHealthResponse>(
      {url: `/api/v1/health/db`, method: 'GET', signal
    },
      );
    }
  



export const getHealthCheckDbApiV1HealthDbGetQueryKey = () => {
    return [
    `/api/v1/health/db`
    ] as const;
    }

    
export const getHealthCheckDbApiV1HealthDbGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckDbApiV1HealthDbGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>> = ({ signal }) => healthCheckDbApiV1HealthDbGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckDbApiV1HealthDbGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>>
export type HealthCheckDbApiV1HealthDbGetQueryError = unknown


export function useHealthCheckDbApiV1HealthDbGet<TData = Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckDbApiV1HealthDbGet<TData = Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckDbApiV1HealthDbGet<TData = Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check Db
 */

export function useHealthCheckDbApiV1HealthDbGet<TData = Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckDbApiV1HealthDbGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckDbApiV1HealthDbGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



