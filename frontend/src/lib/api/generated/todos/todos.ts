/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Boilerplate API
 * A modern full-stack boilerplate with FastAPI backend and React frontend
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  ListTodosApiV1TodosGetParams,
  TodoCreate,
  TodoListResponse,
  TodoResponse,
  TodoUpdate
} from '../api.schemas';

import { customInstance } from '../../client';




/**
 * @summary Create a new todo
 */
export const createTodoApiV1TodosPost = (
    todoCreate: TodoCreate,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TodoResponse>(
      {url: `/api/v1/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: todoCreate, signal
    },
      );
    }
  


export const getCreateTodoApiV1TodosPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTodoApiV1TodosPost>>, TError,{data: TodoCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTodoApiV1TodosPost>>, TError,{data: TodoCreate}, TContext> => {

const mutationKey = ['createTodoApiV1TodosPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTodoApiV1TodosPost>>, {data: TodoCreate}> = (props) => {
          const {data} = props ?? {};

          return  createTodoApiV1TodosPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTodoApiV1TodosPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTodoApiV1TodosPost>>>
    export type CreateTodoApiV1TodosPostMutationBody = TodoCreate
    export type CreateTodoApiV1TodosPostMutationError = HTTPValidationError

    /**
 * @summary Create a new todo
 */
export const useCreateTodoApiV1TodosPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTodoApiV1TodosPost>>, TError,{data: TodoCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTodoApiV1TodosPost>>,
        TError,
        {data: TodoCreate},
        TContext
      > => {

      const mutationOptions = getCreateTodoApiV1TodosPostMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * List todos with filtering, searching, and pagination.

Query: offset, limit, completed, priority, search, sort_by, sort_order
 * @summary List todos with filtering
 */
export const listTodosApiV1TodosGet = (
    params?: ListTodosApiV1TodosGetParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TodoListResponse>(
      {url: `/api/v1/todos`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getListTodosApiV1TodosGetQueryKey = (params?: ListTodosApiV1TodosGetParams,) => {
    return [
    `/api/v1/todos`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getListTodosApiV1TodosGetQueryOptions = <TData = Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError = HTTPValidationError>(params?: ListTodosApiV1TodosGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListTodosApiV1TodosGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>> = ({ signal }) => listTodosApiV1TodosGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListTodosApiV1TodosGetQueryResult = NonNullable<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>>
export type ListTodosApiV1TodosGetQueryError = HTTPValidationError


export function useListTodosApiV1TodosGet<TData = Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError = HTTPValidationError>(
 params: undefined |  ListTodosApiV1TodosGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTodosApiV1TodosGet>>,
          TError,
          Awaited<ReturnType<typeof listTodosApiV1TodosGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListTodosApiV1TodosGet<TData = Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError = HTTPValidationError>(
 params?: ListTodosApiV1TodosGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTodosApiV1TodosGet>>,
          TError,
          Awaited<ReturnType<typeof listTodosApiV1TodosGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListTodosApiV1TodosGet<TData = Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError = HTTPValidationError>(
 params?: ListTodosApiV1TodosGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List todos with filtering
 */

export function useListTodosApiV1TodosGet<TData = Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError = HTTPValidationError>(
 params?: ListTodosApiV1TodosGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodosApiV1TodosGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListTodosApiV1TodosGetQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get a todo by ID
 */
export const getTodoApiV1TodosIdGet = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TodoResponse>(
      {url: `/api/v1/todos/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetTodoApiV1TodosIdGetQueryKey = (id?: number,) => {
    return [
    `/api/v1/todos/${id}`
    ] as const;
    }

    
export const getGetTodoApiV1TodosIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError = HTTPValidationError>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoApiV1TodosIdGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>> = ({ signal }) => getTodoApiV1TodosIdGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTodoApiV1TodosIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>>
export type GetTodoApiV1TodosIdGetQueryError = HTTPValidationError


export function useGetTodoApiV1TodosIdGet<TData = Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError = HTTPValidationError>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTodoApiV1TodosIdGet<TData = Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError = HTTPValidationError>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTodoApiV1TodosIdGet<TData = Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError = HTTPValidationError>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a todo by ID
 */

export function useGetTodoApiV1TodosIdGet<TData = Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError = HTTPValidationError>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoApiV1TodosIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTodoApiV1TodosIdGetQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Partial update - only provided fields are updated.
 * @summary Update a todo
 */
export const updateTodoApiV1TodosIdPatch = (
    id: number,
    todoUpdate: TodoUpdate,
 ) => {
      
      
      return customInstance<TodoResponse>(
      {url: `/api/v1/todos/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: todoUpdate
    },
      );
    }
  


export const getUpdateTodoApiV1TodosIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>, TError,{id: number;data: TodoUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>, TError,{id: number;data: TodoUpdate}, TContext> => {

const mutationKey = ['updateTodoApiV1TodosIdPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>, {id: number;data: TodoUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  updateTodoApiV1TodosIdPatch(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTodoApiV1TodosIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>>
    export type UpdateTodoApiV1TodosIdPatchMutationBody = TodoUpdate
    export type UpdateTodoApiV1TodosIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update a todo
 */
export const useUpdateTodoApiV1TodosIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>, TError,{id: number;data: TodoUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTodoApiV1TodosIdPatch>>,
        TError,
        {id: number;data: TodoUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateTodoApiV1TodosIdPatchMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * @summary Delete a todo
 */
export const deleteTodoApiV1TodosIdDelete = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/todos/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTodoApiV1TodosIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteTodoApiV1TodosIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTodoApiV1TodosIdDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTodoApiV1TodosIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>>
    
    export type DeleteTodoApiV1TodosIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete a todo
 */
export const useDeleteTodoApiV1TodosIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTodoApiV1TodosIdDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTodoApiV1TodosIdDeleteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    