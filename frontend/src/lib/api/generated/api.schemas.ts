/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Boilerplate API
 * A modern full-stack boilerplate with FastAPI backend and React frontend
 * OpenAPI spec version: 1.0.0
 */
export type DatabaseHealthResponseError = string | null;

/**
 * Database health check response model.

Attributes:
    status: Overall health status ("healthy" or "unhealthy")
    database: Database connection status ("connected" or "disconnected")
    error: Optional error message if database check fails
 */
export interface DatabaseHealthResponse {
  status: string;
  database: string;
  error?: DatabaseHealthResponseError;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

/**
 * Basic health check response model.

Attributes:
    status: Health status indicator ("healthy" or "unhealthy")
 */
export interface HealthResponse {
  status: string;
}

/**
 * Priority levels for todos.
 */
export type PriorityEnum = typeof PriorityEnum[keyof typeof PriorityEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriorityEnum = {
  low: 'low',
  medium: 'medium',
  high: 'high',
} as const;

/**
 * Sort field options for todo list queries.
 */
export type SortBy = typeof SortBy[keyof typeof SortBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortBy = {
  created_at: 'created_at',
  due_date: 'due_date',
  priority: 'priority',
  title: 'title',
} as const;

/**
 * Sort order for todo list queries.
 */
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

/**
 * Optional detailed description
 */
export type TodoCreateDescription = string | null;

/**
 * Optional due date
 */
export type TodoCreateDueDate = string | null;

/**
 * Schema for creating a new todo item.

Attributes:
    title: Todo title (required, max 200 characters)
    description: Optional detailed description
    priority: Priority level (default: medium)
    due_date: Optional due date with timezone
 */
export interface TodoCreate {
  /**
   * Todo title
   * @maxLength 200
   */
  title: string;
  /** Optional detailed description */
  description?: TodoCreateDescription;
  /** Priority level */
  priority?: PriorityEnum;
  /** Optional due date */
  due_date?: TodoCreateDueDate;
}

/**
 * Schema for paginated todo list response.

Attributes:
    items: List of todo items
    total: Total count of items matching filters
    offset: Current offset in the result set
    limit: Maximum number of items per page
 */
export interface TodoListResponse {
  items: TodoResponse[];
  total: number;
  offset: number;
  limit: number;
}

export type TodoResponseDescription = string | null;

export type TodoResponseDueDate = string | null;

/**
 * Schema for todo item response.

Attributes:
    id: Unique identifier
    title: Todo title
    description: Optional description
    completed: Completion status
    priority: Priority level
    due_date: Optional due date
    created_at: Creation timestamp
    updated_at: Last update timestamp
 */
export interface TodoResponse {
  id: number;
  title: string;
  description: TodoResponseDescription;
  completed: boolean;
  priority: PriorityEnum;
  due_date: TodoResponseDueDate;
  created_at: string;
  updated_at: string;
}

/**
 * Updated title
 */
export type TodoUpdateTitle = string | null;

/**
 * Updated description
 */
export type TodoUpdateDescription = string | null;

/**
 * Updated completion status
 */
export type TodoUpdateCompleted = boolean | null;

/**
 * Updated priority level
 */
export type TodoUpdatePriority = PriorityEnum | null;

/**
 * Updated due date
 */
export type TodoUpdateDueDate = string | null;

/**
 * Schema for updating an existing todo item.

All fields are optional to support partial updates.

Attributes:
    title: Updated title
    description: Updated description
    completed: Updated completion status
    priority: Updated priority level
    due_date: Updated due date
 */
export interface TodoUpdate {
  /** Updated title */
  title?: TodoUpdateTitle;
  /** Updated description */
  description?: TodoUpdateDescription;
  /** Updated completion status */
  completed?: TodoUpdateCompleted;
  /** Updated priority level */
  priority?: TodoUpdatePriority;
  /** Updated due date */
  due_date?: TodoUpdateDueDate;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type ListTodosApiV1TodosGetParams = {
/**
 * @minimum 0
 */
offset?: number;
/**
 * @minimum 1
 * @maximum 1000
 */
limit?: number;
completed?: boolean | null;
priority?: PriorityEnum | null;
search?: string | null;
sort_by?: SortBy;
sort_order?: SortOrder;
};

